# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19c6plKWouFcvZ5SHx9oyaj1HpkcNTCgu
"""

pip install tensorflow

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow.keras.utils
from tensorflow.python.keras.models import Sequential,Model
from keras.layers import Input, Dense
from keras.models import Model
from keras import optimizers
import datetime
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix , ConfusionMatrixDisplay
import seaborn as sb
import pandas as pd

class PCA:
    def __init__(self, n_components):
        self.n_components = n_components
        self.components = None
        self.mean = None
    def fit(self, X):
        self.mean = np.mean(X, axis=0)
        X = X - self.mean
        cov = np.cov(X.T)
        eigenvalues, eigenvectors = np.linalg.eig(cov)
        eigenvectors = eigenvectors.T
        idxs = np.argsort(eigenvalues)[::-1]
        eigenvalues = eigenvalues[idxs]
        eigenvectors = eigenvectors[idxs]
        self.components = eigenvectors[0:self.n_components]
    def transform(self, X):
        X = X - self.mean
        return np.dot(X, self.components.T)

cifar10=keras.datasets.cifar10
(x_train,y_train),(x_test,y_test)=cifar10.load_data()

class_names=['plane','car','bird','cat','deer','dog','frog','horse','ship','truck']
Class_Names=np.array(class_names)

plt.imshow(x_train[150])

print(np.max(x_train))
print(np.max(x_test))

x_train = x_train/255
x_test = x_test/255

plt.figure(figsize=(10,5))
for i in range(10):
  plt.subplot(2,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(x_train[i],cmap=plt.cm.binary)
  plt.xlabel(Class_Names[y_train[i]])
plt.show()

print(x_train.shape)
print(x_test.shape)

x_train = x_train.reshape(50000,32*32*3).astype('float32')/255
x_test = x_test.reshape(10000,32*32*3).astype('float32')/255

y_train=to_categorical(y_train,10)
y_test=to_categorical(y_test,10)

MyPCA = PCA(200)
MyPCA.fit(x_train)
X_test = MyPCA.transform(x_train)

x_train.shape

X_test.shape

print(y_train.shape)
print(y_test.shape)

neuron_L1=256
neuron_L2=64

Model= tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(32*32*3,)),
    tf.keras.layers.Dense(neuron_L1, activation='relu'),
    tf.keras.layers.Dense(neuron_L2, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')])
Model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
Model.summary()

batch_size=256
epochs=60

t0=datetime.datetime.now()
history= Model.fit(x_train, y_train,
                    epochs=epochs,
                    batch_size=batch_size,
                    validation_split=0.2)
t1=datetime.datetime.now()

val_loss, val_acc = Model.evaluate(x_test, y_test)
print('Accuracy = ',val_acc*100,'%')
print('Time = ',t1-t0)

i=Model.predict(x_test)
i=np.argmax(i,axis=1)
ii=np.argmax(y_test,axis=1)
q=confusion_matrix(ii,i)
df_cm = pd.DataFrame(q, index = ['plane','car','bird','cat','deer','dog','frog','horse','ship','truck'],
                  columns = ['plane','car','bird','cat','deer','dog','frog','horse','ship','truck'])
sb.heatmap(df_cm, annot=True , cmap='Blues', fmt=".1f",annot_kws={'size':10})
plt.figure()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.xlabel('epoch')
plt.ylabel('loss')
plt.title('Model Loss')
plt.legend(['train', 'validation'], loc='upper left')

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title(' Model Accuracy')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train', 'validation'], loc='upper left')